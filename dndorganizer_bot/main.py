from email import message
import telebot;
from telebot import types;
import json;

bot = telebot.TeleBot('7087728399:AAGs6eukMBsP6pr8WsmZVKumYKCCkQZpR24');

@bot.message_handler(commands=['start'])
def start(message):
    if 'user_data' not in globals():
        global user_data
        user_data = {}
    if message.from_user.id not in user_data:
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤—ñ—Ç–∏–∫! –Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –¥–Ω–¥ –ø–æ–º—ñ—á–Ω–∏–∫) –©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∏—à–ª–∏ '/help', –∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É - '/new_character'")
    else:
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤—ñ—Ç–∏–∫! –Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –¥–Ω–¥ –ø–æ–º—ñ—á–Ω–∏–∫) –©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∏—à–ª–∏ '/help', –∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É - '/new_character' –∞–±–æ –≤–≤–µ–¥–∏ '/character' —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

@bot.message_handler(commands=['help'])
def help(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.from_user.id, ' /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n /new_character - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ')
    else:
        bot.send_message(message.from_user.id, ' /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n /new_character - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ \n /character - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ \n /add_characteristics - –¥–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ \n /update_characteristics - –æ–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫ura;—Ç–µ—Ä–∏—Å—Ç–∏–∫ \n /show_characteristics - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ \n /backpack - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —â–æ —î –≤ —Ä—é–∫–∑–∞–∫—É \n /reputation - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü—ñ—é \n /myexp - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –¥–æ—Å–≤—ñ–¥—É \n /new_item - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä \n /short_break - —Å—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫(—Ä–∞–Ω–¥–æ–º–Ω–∞ –ø–æ–¥—ñ—è) \n /long_break - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–≤–≥–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ \n /off_campaign - –ø—ñ—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –º—ñ–∂ –ø—Ä–∏–≥–æ–¥–∞–º–∏')

@bot.message_handler(commands=['new_character'])
def new_character(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.from_user.id, '–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?')
        bot.register_next_step_handler(message, get_playername)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /character —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')


def repeat_questions(message):
    bot.send_message(message.from_user.id, "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    bot.register_next_step_handler(message, get_playername)

def get_playername(message):
    global playername_;
    playername_ = message.text; 
    bot.send_message(message.from_user.id, "–Ø–∫–∏–π –∑–≤–∞—Ç–∏ —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?");
    bot.register_next_step_handler(message, get_charactername);

def get_charactername(message):
    global charactername_;
    charactername_ = message.text; 
    bot.send_message(message.from_user.id, "–Ø–∫—ñ —É —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏?(–≤—ñ–Ω/–≤–æ–Ω–∞/–≤–æ–Ω–∏)");
    bot.register_next_step_handler(message, get_definition);

def get_definition(message):
    global definition_;
    definition_ = message.text.lower();
    bot.send_message(message.from_user.id, "–Ø–∫–∏–π —É —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–ª–∞—Å?");
    bot.register_next_step_handler(message, get_class);

def get_class(message):
    global class_;
    class_ = message.text.lower();
    bot.send_message(message.from_user.id, "–Ø–∫–∞ —É —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ä–∞—Å–∞?");
    bot.register_next_step_handler(message, get_race);

def get_race(message):
    global race_;
    race_ = message.text.lower();
    bot.send_message(message.from_user.id, "–Ø–∫–∏–π —É —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–≤—ñ—Ç–æ–≥–ª—è–¥?");
    bot.register_next_step_handler(message, get_worldview);

def get_worldview(message):
    global worldview_;
    worldview_ = message.text.lower();
    keyboard = types.InlineKeyboardMarkup();
    key_yes = types.InlineKeyboardButton(text='–¢–∞–∫', callback_data='yes');
    keyboard.add(key_yes);
    key_no= types.InlineKeyboardButton(text='–ù—ñ', callback_data='no');
    keyboard.add(key_no);
    if definition_ == '–≤—ñ–Ω':
        question = '–¢–µ–±–µ –∑–≤–∞—Ç–∏ '+playername_+', —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–≤–∞—Ç–∏ '+charactername_+', –≤—ñ–Ω '+race_+'-'+class_+' —ñ –º–∞—î '+worldview_+' —Å–≤—ñ—Ç–æ–≥–ª—è–¥?';
    elif definition_ == '–≤–æ–Ω–∞':
        question = '–¢–µ–±–µ –∑–≤–∞—Ç–∏ '+playername_+', —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–≤–∞—Ç–∏ '+charactername_+', –≤–æ–Ω–∞ '+race_+'-'+class_+' —ñ –º–∞—î '+worldview_+' —Å–≤—ñ—Ç–æ–≥–ª—è–¥?';
    elif definition_ == '–≤–æ–Ω–∏':
        question = '–¢–µ–±–µ –∑–≤–∞—Ç–∏ '+playername_+', —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–≤–∞—Ç–∏ '+charactername_+', –≤–æ–Ω–∏ '+race_+'-'+class_+' —ñ –º–∞—é—Ç—å '+worldview_+' —Å–≤—ñ—Ç–æ–≥–ª—è–¥?';
    else: 
        bot.send_message(message.from_user.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç–∏ –≤–≤—ñ–≤/–≤–≤–µ–ª–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏")
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)

def save_user_data():
    global user_data
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        user_id = call.message.chat.id
        user_data[user_id] = {
            'playername': playername_,
            'charactername': charactername_,
            'definition': definition_,
            'race': race_,
            'class': class_,
            'worldview': worldview_,
            'reputation': 0,
            'exp': 0,
            'level': 1,
            'proficiency_bonus': 2,
            'backpack' : [
                {
                "name": "item name",
                "type": "item type",
                "damage": "item damage",
                "effect": "item effect",
                "description": "item description",
                "quantity" : 1,
                },
            ],
        }
        save_user_data()
        bot.send_message(call.message.chat.id, '–î—è–∫—É—é, —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.')
    elif call.data == "no":
        repeat_questions(message);

@bot.message_handler(commands=['character'])
def display_user_data(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        playername = user_data_record['playername']
        charactername = user_data_record['charactername']
        definition = user_data_record['definition']
        race = user_data_record['race']
        class_ = user_data_record['class']
        worldview = user_data_record['worldview']
        bot.send_message(message.from_user.id, '–í–∏–±–∞—á –∑–∞ –∑–∞—Ç—Ä–∏–º–∫—É, '+ playername +'! –û—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\nüîπ–Ü–º*—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: '+ charactername +'\nüîπ –†–∞—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: '+ race +'\nüîπ –ó–∞–π–º–µ–Ω–Ω–∏–∫–∏: '+ definition +'\nüîπ –ö–ª–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: '+ class_ +'\nüîπ –°–≤—ñ—Ç–æ–≥–ª—è–¥: '+ worldview +'');
    else:
        bot.send_message(message.from_user.id, '–Ø –∑–≤—ñ—Ä–∏–≤—Å—è –∑—ñ —Å–ø–∏—Å–∫–∞–º–∏ —ñ, –Ω–∞ –∂–∞–ª—å, –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Ç–µ–±–µ —á–∏ —Ç–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞(. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏.')

@bot.message_handler(commands=['add_characteristics'])
def add_characteristics(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: —Å–∏–ª–∞, —Å–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å, —Å—Ç–∞—Ç—É—Ä–∞, —ñ–Ω—Ç–µ–ª–µ–∫—Ç, –º—É–¥—Ä—ñ—Å—Ç—å, —Ö–∞—Ä–∏–∑–º–∞.')
        bot.register_next_step_handler(message, save_characteristics)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def save_characteristics(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    characteristics = message.text.split(', ')
    if len(characteristics) == 6:
        user_data_record['characteristics'] = {
            'strength': characteristics[0],
            'dexterity': characteristics[1],
            'constitution': characteristics[2],
            'intelligence': characteristics[3],
            'wisdom': characteristics[4],
            'charisma': characteristics[5]
        }
        save_user_data()
        bot.send_message(message.from_user.id, '–î—è–∫—É—é, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.')
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /add_characteristics —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.')

@bot.message_handler(commands=['show_characteristics'])
def show_characteristics(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        characteristics = user_data_record['characteristics']
        modifiers = {
            'strength': calculate_modifier(int(characteristics['strength'])),
            'dexterity': calculate_modifier(int(characteristics['dexterity'])),
            'constitution': calculate_modifier(int(characteristics['constitution'])),
            'intelligence': calculate_modifier(int(characteristics['intelligence'])),
            'wisdom': calculate_modifier(int(characteristics['wisdom'])),
            'charisma': calculate_modifier(int(characteristics['charisma']))
        }
        bot.send_message(message.from_user.id, '–ó–≤—ñ—Å–Ω–æ, –æ—Å—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ' +charactername_+'\nüîπ –°–∏–ª–∞: ' + characteristics['strength'] + ' (' + str(modifiers['strength']) + ')\nüîπ –°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å: ' + characteristics['dexterity'] + ' (' + str(modifiers['dexterity']) + ')\nüîπ –°—Ç–∞—Ç—É—Ä–∞: ' + characteristics['constitution'] + ' (' + str(modifiers['constitution']) + ')\nüîπ –Ü–Ω—Ç–µ–ª–µ–∫—Ç: ' + characteristics['intelligence'] + ' (' + str(modifiers['intelligence']) + ')\nüîπ –ú—É–¥—Ä—ñ—Å—Ç—å: ' + characteristics['wisdom'] + ' (' + str(modifiers['wisdom']) + ')\nüîπ –•–∞—Ä–∏–∑–º–∞: ' + characteristics['charisma'] + ' (' + str(modifiers['charisma']) + ')')
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def calculate_modifier(value):
    if value < 1:
        return -5
    elif value < 3:
        return -4
    elif value < 5:
        return -3
    elif value < 7:
        return -2
    elif value < 9:
        return -1
    elif value < 11:
        return 0
    elif value < 13:
        return 1
    elif value < 15:
        return 2
    elif value < 17:
        return 3
    elif value < 19:
        return 4
    elif value < 21:
        return 5
    elif value < 23:
        return 6
    elif value < 25:
        return 7
    elif value < 27:
        return 8
    elif value < 29:
        return 9
    else:
        return 10
    
@bot.message_handler(commands=['update_characteristics'])
def update_characteristics(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: —Å–∏–ª–∞, —Å–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å, —Å—Ç–∞—Ç—É—Ä–∞, —ñ–Ω—Ç–µ–ª–µ–∫—Ç, –º—É–¥—Ä—ñ—Å—Ç—å, —Ö–∞—Ä–∏–∑–º–∞.')
        bot.register_next_step_handler(message, save_updated_characteristics)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def save_updated_characteristics(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    characteristics = message.text.split(', ')
    if len(characteristics) == 6:
        user_data_record['characteristics'] = {
            'strength': characteristics[0],
            'dexterity': characteristics[1],
            'constitution': characteristics[2],
            'intelligence': characteristics[3],
            'wisdom': characteristics[4],
            'charisma': characteristics[5]
        }
        save_user_data()
        bot.send_message(message.from_user.id, '–î—è–∫—É—é, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ.')
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /update_characteristics —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.')

@bot.message_handler(commands=['reputation'])
def display_reputation(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        reputation = user_data_record['reputation']
        if reputation <= -100:
            reputation_status = '–°–ø—Ä–∞–≤–∂–Ω—ñ–π –∑–ª–æ–¥—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ–π'
        elif reputation <= -50:
            reputation_status = '–í–æ—Ä–æ–≥ –Ω–∞—Ä–æ–¥—É'
        elif reputation == 0:
            reputation_status = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'
        elif reputation >= 50:
            reputation_status = '–î—Ä—É–∂–Ω—ñ–π –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫'
        elif reputation >= 100:
            reputation_status = '–°–ø—Ä–∞–≤–∂–Ω—ñ–π –≥–µ—Ä–æ–π –∑ —ñ—Å—Ç–æ—Ä—ñ–π'
        else:
            reputation_status = '–ù–µ–≤—ñ–¥–æ–º–æ'
        bot.send_message(message.from_user.id, '–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è: ' + str(reputation) + '\n–°—Ç–∞—Ç—É—Å: ' + reputation_status)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

@bot.message_handler(commands=['add_reputation_points'])
def add_reputation_points(message):
    user_id = message.from_user.id
    if user_id in user_data:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó, —è–∫—É —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏.')
        bot.register_next_step_handler(message, save_reputation_points)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def save_reputation_points(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    reputation_points = int(message.text)
    user_data_record['reputation'] += reputation_points
    save_user_data()
    bot.send_message(message.from_user.id, '–î—è–∫—É—é, –±–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ. –í–∞—à–∞ –Ω–æ–≤–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è: ' + str(user_data_record['reputation']))

@bot.message_handler(commands=['my_exp'])
def display_exp(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        exp = user_data_record['exp']
        level = calculate_level(exp)
        proficiency_bonus = calculate_proficiency_bonus(level)
        bot.send_message(message.from_user.id, '–í–∞—à –¥–æ—Å–≤—ñ–¥: ' + str(exp) + '\n–†—ñ–≤–µ–Ω—å: ' + str(level) + '\n–ë–æ–Ω—É—Å –º–∞–π—Å—Ç–µ—Ä–Ω–æ—Å—Ç—ñ: ' + str(proficiency_bonus))
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

@bot.message_handler(commands=['add_exp'])
def add_exp(message):
    user_id = message.from_user.id
    if user_id in user_data:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å–≤—ñ–¥—É, —è–∫—É —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏.')
        bot.register_next_step_handler(message, save_exp)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def save_exp(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    exp_points = int(message.text)
    user_data_record['exp'] += exp_points
    save_user_data()
    new_level = calculate_level(user_data_record['exp'])
    bot.send_message(message.from_user.id, '–î—è–∫—É—é, –¥–æ—Å–≤—ñ–¥ –¥–æ–¥–∞–Ω–æ. –í–∞—à –Ω–æ–≤–∏–π –¥–æ—Å–≤—ñ–¥: ' + str(user_data_record['exp']))
    if new_level > user_data_record['level']:
        bot.send_message(message.from_user.id, '–í—ñ—Ç–∞—é! –¢–∏ –ø—ñ–¥–Ω—è–≤—Å—è –Ω–∞ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å! –¢–≤—ñ–π –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: ' + str(new_level))
    user_data_record['level'] = new_level

def calculate_level(exp):
    if exp < 300:
        return 1
    elif exp < 900:
        return 2
    elif exp < 2700:
        return 3
    elif exp < 6500:
        return 4
    elif exp < 14000:
        return 5
    elif exp < 23000:
        return 6
    elif exp < 34000:
        return 7
    elif exp < 48000:
        return 8
    elif exp < 64000:
        return 9
    elif exp < 85000:
        return 10
    elif exp < 100000:
        return 11
    elif exp < 120000:
        return 12
    elif exp < 140000:
        return 13
    elif exp < 165000:
        return 14
    elif exp < 195000:
        return 15
    elif exp < 225000:
        return 16
    elif exp < 265000:
        return 17
    elif exp < 305000:
        return 18
    elif exp < 355000:
        return 19
    else:
        return 20

def calculate_proficiency_bonus(level):
    if level <= 4:
        return 2
    elif level <= 8:
        return 3
    elif level <= 12:
        return 4
    elif level <= 16:
        return 5
    elif level <= 20:
        return 6
    else:
        return 2

@bot.message_handler(commands=['backpack'])
def display_backpack(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        backpack = user_data_record['backpack']
        if len(backpack) > 0:
            items = []
            for i, item in enumerate(backpack):
                if item['type'] == '–∑–±—Ä–æ—è':
                    if 'damage' in item:
                        items.append(str(i+1) + '. ' + item['name'] + ' (' + item['type'] + ') x' + str(item['quantity']) + ' - —É—Ä–æ–Ω: ' + item['damage'])
                    else:
                        items.append(str(i+1) + '. ' + item['name'] + ' (' + item['type'] + ') x' + str(item['quantity']) + ' - —É—Ä–æ–Ω: N/A')
                elif item['type'] == '–∑—ñ–ª–ª—è':
                    if 'effect' in item:
                        items.append(str(i+1) + '. ' + item['name'] + ' (' + item['type'] + ') x' + str(item['quantity']) + ' - –µ—Ñ–µ–∫—Ç: ' + item['effect'])
                    else:
                        items.append(str(i+1) + '. ' + item['name'] + ' (' + item['type'] + ') x' + str(item['quantity']) + ' - –µ—Ñ–µ–∫—Ç: N/A')
                else:
                    items.append(str(i+1) + '. ' + item['name'] + ' (' + item['type'] + ') x' + str(item['quantity']))
            bot.send_message(message.from_user.id, '–†—é–∫–∑–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ' + charactername_ + ':\n' + '\n'.join(items))
        else:
            bot.send_message(message.from_user.id, '–í–∞—à —Ä—é–∫–∑–∞–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

@bot.message_handler(commands=['new_item'])
def new_item(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É:')
        bot.register_next_step_handler(message, get_item_name)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def get_item_name(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_name = message.text
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç—É(–∑–±—Ä–æ—è, –∑—ñ–ª–ª—è, —Å—é–∂–µ—Ç, —ñ–Ω—à–µ):')
    bot.register_next_step_handler(message, get_item_type, item_name)

def get_item_type(message, item_name):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_type = message.text.lower()
    if item_type not in ['–∑–±—Ä–æ—è', '–∑—ñ–ª–ª—è', '—Å—é–∂–µ—Ç', '—ñ–Ω—à–µ']:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç—É. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_item —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.')
    else:
        if item_type == '–∑—ñ–ª–ª—è':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –µ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç—É:')
            bot.register_next_step_handler(message, get_item_effect, item_name, item_type)
        elif item_type == '–∑–±—Ä–æ—è':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —É—Ä–æ–Ω –∑–±—Ä–æ—ó:')
            bot.register_next_step_handler(message, get_item_damage, item_name, item_type)
        else: 
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—É:')
            bot.register_next_step_handler(message, get_item_quantity, item_name, item_type)

def get_item_effect(message, item_name, item_type):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_effect = message.text
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—É:')
    bot.register_next_step_handler(message, get_item_quantity, item_name, item_type, item_effect)

def get_item_damage(message, item_name, item_type,):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_damage = message.text
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—É:')
    bot.register_next_step_handler(message, get_item_quantity, item_name, item_type, item_damage)


def get_item_quantity(message, item_name, item_type, item_damage, item_effect=None):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_quantity = int(message.text)
    if item_quantity < 1:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—É. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_item —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.')
    else:
        if 'backpack' not in user_data_record:
            user_data_record['backpack'] = []
        user_data_record['backpack'].append({
            'name': item_name,
            'type': item_type,
            'quantity': item_quantity,
            'effect': item_effect,
            'damage' : item_damage
        })
        save_user_data()
        bot.send_message(message.from_user.id, '–î—è–∫—É—é, –ø—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –≤ —Ä—é–∫–∑–∞–∫.')


@bot.message_handler(commands=['delete_item'])
def delete_item(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data_record = user_data[user_id]
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, —è–∫–∏–π —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏:')
        bot.register_next_step_handler(message, get_item_number_to_delete)
    else:
        bot.send_message(message.from_user.id, '–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new_character —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')

def get_item_number_to_delete(message):
    user_id = message.from_user.id
    user_data_record = user_data[user_id]
    item_number = int(message.text) - 1
    if item_number < 0 or item_number >= len(user_data_record['backpack']):
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /delete_item —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.')
    else:
        del user_data_record['backpack'][item_number]
        save_user_data()
        bot.send_message(message.from_user.id, '–ü—Ä–µ–¥–º–µ—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.')





















bot.polling(none_stop=True, interval=0)